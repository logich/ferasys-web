#!/bin/bash

# Feral Systems Website Deployment Script
# This script syncs your website to S3 and invalidates CloudFront cache

# Configuration - Update these with your actual values
S3_BUCKET="your-bucket-name"
CLOUDFRONT_DISTRIBUTION_ID="your-distribution-id"
# Using default AWS CLI profile

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${YELLOW}üê∫ Feral Systems Deployment Script${NC}"
echo "=================================="

# Check if AWS CLI is installed
if ! command -v aws &> /dev/null; then
    echo -e "${RED}‚ùå AWS CLI is not installed. Please install it first.${NC}"
    exit 1
fi

# Check if configuration is set
if [ "$S3_BUCKET" = "your-bucket-name" ]; then
    echo -e "${RED}‚ùå Please update the S3_BUCKET variable in this script with your actual bucket name.${NC}"
    exit 1
fi

if [ "$CLOUDFRONT_DISTRIBUTION_ID" = "your-distribution-id" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  CloudFront distribution ID not set. Skipping cache invalidation.${NC}"
    SKIP_CLOUDFRONT=true
fi

echo -e "${YELLOW}üì¶ Syncing files to S3 bucket: $S3_BUCKET${NC}"

# Sync files to S3 with appropriate content types and cache headers
aws s3 sync . s3://$S3_BUCKET \
    --exclude "*.sh" \
    --exclude "*.DS_Store" \
    --exclude "new-index.html" \
    --exclude "index-original-backup.html" \
    --exclude "Feral Systems.webarchive" \
    --exclude "FeralSystems/*" \
    --cache-control "max-age=31536000" \
    --metadata-directive REPLACE

# Set specific cache headers for HTML files (shorter cache)
aws s3 cp index.html s3://$S3_BUCKET/index.html \
    --content-type "text/html" \
    --cache-control "max-age=300"

# Set specific cache headers for images
aws s3 cp ferasys.png s3://$S3_BUCKET/ferasys.png \
    --content-type "image/png" \
    --cache-control "max-age=31536000"

aws s3 cp wolf.jpg s3://$S3_BUCKET/wolf.jpg \
    --content-type "image/jpeg" \
    --cache-control "max-age=31536000"

aws s3 cp wolf.webp s3://$S3_BUCKET/wolf.webp \
    --content-type "image/webp" \
    --cache-control "max-age=31536000"

if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Files successfully synced to S3!${NC}"
else
    echo -e "${RED}‚ùå Error syncing files to S3${NC}"
    exit 1
fi

# Invalidate CloudFront cache if distribution ID is provided
if [ "$SKIP_CLOUDFRONT" != true ]; then
    echo -e "${YELLOW}üîÑ Invalidating CloudFront cache...${NC}"
    
    INVALIDATION_ID=$(aws cloudfront create-invalidation \
        --distribution-id $CLOUDFRONT_DISTRIBUTION_ID \
        --paths "/*" \
        --query 'Invalidation.Id' \
        --output text)
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ CloudFront invalidation created: $INVALIDATION_ID${NC}"
        echo -e "${YELLOW}‚è≥ Cache invalidation may take 5-15 minutes to complete.${NC}"
    else
        echo -e "${RED}‚ùå Error creating CloudFront invalidation${NC}"
    fi
fi

echo ""
echo -e "${GREEN}üéâ Deployment complete!${NC}"
echo -e "${YELLOW}üåê Your website should be updated shortly.${NC}"
